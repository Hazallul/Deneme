# .github/workflows/main.yml (veya tercih ettiğin bir isim)

name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. Adım: Kodu checkout et
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Adım: Java 17 ve Maven'ı ayarla
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'

    # 3. Adım: Maven ile projeyi derle (testleri atla)
    - name: Build with Maven
      run: mvn clean install -DskipTests

    # 4. Adım: Docker Hub'a giriş yap
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    # 5. Adım: Docker image'ını build et ve push'la
    # Image'ı hem 'latest' hem de eşsiz olan commit SHA'sı ile etiketliyoruz.
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: |
          hazallul/spring-boot-app:${{ github.sha }}
          hazallul/spring-boot-app:latest

    # 6. Adım: Anlık zaman damgasını al
    # Bu adım, bir sonraki adımda kullanılmak üzere zaman damgasını bir çıktı olarak üretir.
    - name: Get current timestamp
      id: get_timestamp
      run: echo "timestamp=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT



    # 7. Adım: Kubernetes Deployment dosyasını güncelle
    # Bu adım, hem image etiketini hem de zaman damgası annotation'ını tek seferde günceller.
    # Bu sayede Argo CD her seferinde değişikliği algılar.
    - name: Update Kubernetes deployment image and annotation
      uses: fjogeleit/yaml-update-action@main # Bu action, YAML dosyalarını güncellemek için harika bir araç
      with:
        # Değişikliğin yapılacağı repo. Eğer aynı repodaysa bu satırı silebilirsin.
        repository: Hazallul/Deneme 
        # Bu action'ın diğer repoya yazma izni olması için GH_TOKEN gerekir.
        token: ${{ secrets.GH_TOKEN }} 
        # Değişikliğin yapılacağı branch
        branch: main
        # Güncellenecek dosyanın adı
        valueFile: Deployment.yaml
        # Yapılacak değişiklikleri JSON formatında belirtiyoruz
        changes: |
          {
            "spec.template.spec.containers[0].image": "hazallul/spring-boot-app:${{ github.sha }}",
            "spec.template.metadata.annotations['kubectl.kubernetes.io/restartedAt']": "2028-07-31T15:00:00Z"
          }
        # Commit mesajını oluştur
        message: "ci: Update image to ${{ github.sha }} and restart deployment"

    - name: Show Deployment.yaml before sed
      run: cat Deployment.yaml

    - name: Update restartedAt annotation with sed
      run: sed -i 's/kubectl.kubernetes.io\/restartedAt: ".*/kubectl.kubernetes.io\/restartedAt: "2025-07-31T20:00:07Z"/' Deployment.yaml

    - name: Show Deployment.yaml after sed
      run: cat Deployment.yaml

    - name: Git status
      run: git status

    - name: Commit and push changes
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git add Deployment.yaml
        git commit -m "Update restartedAt annotation" || echo "No changes to commit"
        git push origin main
